// package validator_v1 implements a validator communication protocol.
// Validator firmware is implementing the server while Apollo daemon
// implements the client.

syntax = "proto3";
package validator.v1;

option go_package = "apis/validator/v1";

service ValidatorService {
  // StreamReaderEvents is a subscrtption type handler where Apollo client subscribes
  // to card tap events
  rpc StreamReaderEvents(StreamReaderEventsRequest) returns  (stream StreamReaderEventsResponse) {}

  rpc CardWrite(CardWriteRequest) returns (CardWriteResponse) {}

  // Display is used to request validator firmware to open an HTML link or just 
  // display the given HTML contents.
  rpc Display(DisplayRequest) returns (DisplayResponse) {}

  // PlaySound is used to request validator firmware to play specified
  // file through the internal speakers
  rpc PlaySound(PlaySoundRequest) returns (PlaySoundResponse) {}

  // SetConfiguration is used to set configuration such as read/write sectors and keys
  // to the validator firmware.
  rpc SetConfiguration(SetConfigurationRequest) returns (SetConfigurationResponse) {}

  // GetConfiguration returns current validator firmware configuration. It includes information such 
  // as read/write sector info.
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}  

  // GetStatus returns current status of the system. In normal operation VALIDATOR_STATUS_ACTIVE
  // will be returned which means that it's okay to validate users
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
}

message StreamReaderEventsRequest {}

// Identifiable card types
enum CardType {
  CARD_TYPE_UNSPECIFIED = 0;
  CARD_TYPE_MIFARE4K    = 1;
  CARD_TYPE_MIFARE1K    = 2;
  CARD_TYPE_ULTRALIGHT  = 3;
  CARD_TYPE_DESFIRE     = 4;
  CARD_TYPE_PLUS        = 5;
  CARD_TYPE_EMV         = 6;
  CARD_TYPE_UNKNOWN     = 7;
}

// ValidateRequest is a request sent by the validator to the onboard node
// for the card/ticket validation
message StreamReaderEventsResponse {
  enum ReadEventType {
    READ_EVENT_TYPE_UNSPECIFIED         = 0;
    READ_EVENT_TYPE_OK                  = 1; // all ok, block data ready
    READ_EVENT_TYPE_UNSPECIFIED_ERROR   = 2; // any other error than the ones below
    READ_EVENT_TYPE_UNKNOWN_CARD_TYPE   = 3; // not a Mifare 4k card
    READ_EVENT_TYPE_WRONG_KEY           = 4; // auth failed, probably not "our" card 
    READ_EVENT_TYPE_PERMISSIONS         = 5; // auth succeeded, but cannot read (incorrect card config)
    READ_EVENT_TYPE_INVALID_DATA        = 6; // both blocks contain invalid data (new card or fraud)
  }
  ReadEventType       read_event_type = 1;
  bytes               identifier      = 2; // mifare, for example '3059947987'
  bytes               block_data      = 3; // data read using info provided by GetConfigurationResponse readSector & readSecodKey
  CardType            type            = 4; // type of the user device
  map<string, string> metadata        = 5; // gps coords, stop_id, distance, etc..
  string              error_message   = 6; // optional message for the error               
}

message CardWriteRequest {
  bytes block_data = 1;
}

message CardWriteResponse {
  enum WriteStatus {
    WRITE_STATUS_UNSPECIFIED       = 0;
    WRITE_STATUS_SUCCESS           = 1;
    WRITE_STATUS_UNSPECIFIED_ERROR = 2;
    WRITE_STATUS_WRONG_PERMISSIONS = 3;
  }  
  WriteStatus status        = 1; // write status
  string      error_message = 2; // optional message for the error
}

message SetConfigurationRequest {
  uint64 sector          = 1;
  uint64 primary_block   = 2;
  uint64 secondary_block = 3;
  bytes  sector_key      = 4;
  // unix_nano is current time as a Unix time, the number of nanoseconds elapsed
  // since January 1, 1970 UTC.
  int64  unix_nano       = 5;
}

message SetConfigurationResponse {}

message GetConfigurationRequest {}

// GetConfigurationResponse is returned by the node
// to validator to indicate which sector of the card to read during
// the validation
message GetConfigurationResponse {
  uint64 sector          = 1;
  uint64 primary_block   = 2;
  uint64 secondary_block = 3;
  bytes  sector_key      = 4;
  // unix_nano is current time as a Unix time, the number of nanoseconds elapsed
  // since January 1, 1970 UTC.
  int64  unix_nano       = 5;
}

message DisplayRequest {
  string url      = 1;  
}

message DisplayResponse {}

message PlaySoundRequest {
  string filepath = 2;
}

message PlaySoundResponse {}

message GetStatusRequest {}

// GetStatusResponse is used by the node daemon to provide status
// to the validator
message GetStatusResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACTIVE      = 1;
    STATUS_INACTIVE    = 2;
  }
  string currently_displaying     = 1; // Currently displayed (URL or filepath)
  Status status                   = 2;  
  string message                  = 3; // optional, under normal circumstances it will be empty
}