// package validator_v1 implements a validator communication protocol.
// Validator firmware is implementing the server while Apollo daemon
// implements the client.

syntax = "proto3";
package validator.v1;

option go_package = "apis/validator/v1";

service ValidatorService {
  // StreamReaderEvents is a subscrtption type handler where Apollo client subscribes
  // to card tap events
  rpc StreamReaderEvents(StreamReaderEventsRequest) returns  (stream StreamReaderEventsResponse) {}

  rpc CardWrite(CardWriteRequest) returns (CardWriteResponse) {}

  // Display is used to request validator firmware to open an HTML link or just 
  // display the given HTML contents.
  rpc Display(DisplayRequest) returns (DisplayResponse) {}

  // PlaySound is used to request validator firmware to play specified
  // file through the internal speakers
  rpc PlaySound(PlaySoundRequest) returns (PlaySoundResponse) {}

  // SetConfiguration is used to set configuration such as read/write sectors and keys
  // to the validator firmware.
  rpc SetConfiguration(SetConfigurationRequest) returns (SetConfigurationResponse) {}

  // GetConfiguration returns current validator firmware configuration. It includes information such 
  // as read/write sector info.
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}  

  // GetStatus returns current status of the system. In normal operation VALIDATOR_STATUS_ACTIVE
  // will be returned which means that it's okay to validate users
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
}

message StreamReaderEventsRequest {}

// ValidateRequest is a request sent by the validator to the onboard node
// for the card/ticket validation
message StreamReaderEventsResponse {
  enum ReadEventType {
    READ_EVENT_TYPE_UNSPECIFIED = 0;
    READ_EVENT_TYPE_OK          = 1;
    READ_EVENT_TYPE_ERROR       = 2;
  }
  ReadEventType       read_event_type = 1;
  string              identifier      = 2;  // mifare, for example '3059947987'
  bytes               block_data      = 3; // data read using info provided by GetConfigurationResponse readSector & readSecodKey
  int64               type            = 4;  // type of the user device (unspecified=0, mifare=1, desfire=2, etc.,).
  map<string, string> metadata        = 5;  // gps coords, stop_id, distance, etc..
  int64               error_code      = 6; // error class code (failed to read)
  string              error_message   = 7; // optional message for the error               
}

message CardWriteRequest {
  bytes block_data = 1;
}

message CardWriteResponse {
  enum WriteStatus {
    WRITE_STATUS_UNSPECIFIED = 0;
    WRITE_STATUS_SUCCESS     = 1;
    WRITE_STATUS_ERROR       = 2;
  }  
  WriteStatus status        = 1; // write status
  int64       error_code    = 2; // error class code (permanent, transient, etc.)
  string      error_message = 3; // optional message for the error
}

message SetConfigurationRequest {
  uint64 read_sector     = 1;
  bytes  read_sector_key  = 2;
  uint64 write_sector    = 3;
  bytes  write_sector_key = 4;
  // unix_nano is current time as a Unix time, the number of nanoseconds elapsed
  // since January 1, 1970 UTC.
  int64  unix_nano       = 5;
}

message SetConfigurationResponse {}

message GetConfigurationRequest {}

// GetConfigurationResponse is returned by the node
// to validator to indicate which sector of the card to read during
// the validation
message GetConfigurationResponse {
  uint64 read_sector     = 1;
  bytes  read_sector_key  = 2;
  uint64 write_sector    = 3;
  bytes  write_sector_key = 4;
  // unix_nano is current time as a Unix time, the number of nanoseconds elapsed
  // since January 1, 1970 UTC.
  int64  unix_nano       = 5;
}

message DisplayRequest {
  string url      = 1;
  bytes  contents = 2;
}

message DisplayResponse {}

message PlaySoundRequest {
  string filepath = 2;
}

message PlaySoundResponse {}

message GetStatusRequest {}

// GetStatusResponse is used by the node daemon to provide status
// to the validator
message GetStatusResponse {
  string currently_displaying     = 1; // Currently displayed (URL or filepath)
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACTIVE      = 1;
    STATUS_LOCKED      = 2;
    STATUS_SUSPENDED   = 3;
    STATUS_OFFLINE     = 4;
  }  
  Status status   = 2;  
  string message  = 3; // optional, under normal circumstances it will be empty
}