// package validator_v1 implements a validator communication protocol.
// Validator firmware is implementing the server while Apollo daemon
// implements the client.

syntax = "proto3";
package github.com.apollohq.fleetnodedaemon.apis.validator_v1;

service Validator {
  // Stream card tap events
  rpc StreamTapEvents(TapEventRequest) returns  (stream TapEvent) {}

  // Display is used to request validator firmware to open an HTML link or just 
  // display the given HTML contents.
  rpc Display(DisplayHTMLRequest) returns (DisplayResponse) {}

  // PlaySound is used to request validator firmware to play specified
  // file through the internal speakers
  rpc PlaySound(PlaySoundRequest) returns (PlaySoundResponse) {}

  // GetConfiguration returns current validator firmware configuration. It includes information such 
  // as read/write sector info.
  rpc GetConfiguration(ValidatorConfigurationRequest) returns (ValidatorConfigurationResponse) {}  

  // GetStatus returns current status of the system. In normal operation VALIDATOR_STATUS_ACTIVE
  // will be returned which means that it's okay to validate users
  rpc GetStatus(StatusRequest) returns (StatusResponse) {}
}

message ValidatorConfigurationRequest {}

// ValidatorConfigurationResponse is returned by the node
// to validator to indicate which sector of the card to read during
// the validation
message ValidatorConfigurationResponse {
  uint64 readSector     = 1;
  bytes  readSectorKey  = 2;
  uint64 writeSector    = 3;
  bytes  writeSectorKey = 4;
  // unixNano returns current time as a Unix time, the number of nanoseconds elapsed
  // since January 1, 1970 UTC.
  int64  unixNano       = 5;
}

message TapEventRequest {}

// ValidateRequest is a request sent by the validator to the onboard node
// for the card/ticket validation
message TapEvent {
  string              identifier = 1; // mifare, for example '3059947987'
  enum Type {
    // 0 is reserved for unknown
    UNKNOWN      = 0;
    MIFARE       = 1;
    RFID         = 2;
  };
  Type                type       = 2; // token type (card, rfid)
  bytes               blockData  = 3; // data read using info provided by ValidatorConfigurationResponse readSector & readSecodKey
  map<string, string> metadata   = 4; // gps coords, stop_id, distance, etc..
}

message DisplayHTMLRequest {
  string url      = 1;
  bytes  contents = 2;
}

message DisplayResponse {}

message PlaySoundRequest {
  string filepath = 2;
}

message PlaySoundResponse {}

message StatusRequest {}

// StatusResponse is used by the node daemon to provide status
// to the validator
message StatusResponse {
  string currentlyDisplaying     = 1; // Currently displayed (URL or filepath)
  enum Status {
    VALIDATOR_STATUS_UNKNOWN     = 0;
    VALIDATOR_STATUS_ACTIVE      = 1;
    VALIDATOR_STATUS_LOCKED      = 2;
    VALIDATOR_STATUS_SUSPENDED   = 3;
    VALIDATOR_STATUS_OFFLINE     = 4;
  }  
  Status status   = 2;  
  string message  = 3; // optional, under normal circumstances it will be empty
}